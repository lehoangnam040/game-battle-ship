/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import entity.Ship;
import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;

/**
 *
 * @author Nam
 */
public class PlayBoard extends javax.swing.JPanel {

    /**
     * Creates new form PlayBoard
     */
    public JLabel[][] square = new JLabel[8][8];

    public PlayBoard() {
        initComponents();
        Border border = new LineBorder(new Color(160, 160, 160), 1, true);
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                square[i][j] = new JLabel();
                square[i][j].setSize(70, 70);
                square[i][j].setBackground(new Color(102, 178, 255));
                square[i][j].setOpaque(true);
                square[i][j].setBorder(border);
                this.add(square[i][j]);
            }
        }
    }

    public PlayBoard(int[][] matrix, Ship[] ships) {
        initComponents();
        Border border = new LineBorder(new Color(160, 160, 160), 1, true);
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                square[i][j] = new JLabel();
                square[i][j].setSize(70, 70);
                square[i][j].setBackground(new Color(102, 178, 255));
                if (matrix[i][j] == 0) {
                    square[i][j].setBorder(border);
                }
                square[i][j].setOpaque(true);
                this.add(square[i][j]);
            }
        }
        setIcon(ships[0], "image\\AirCraftCarrier_Horizontal.png", "image\\AirCraftCarrier_Vertical.png");
        setIcon(ships[1], "image\\BattleShip_Horizontal.png", "image\\BattleShip_Vertical.png");
        setIcon(ships[2], "image\\Cruiser_Horizontal.png", "image\\Cruiser_Vertical.png");
        setIcon(ships[3], "image\\PatrolBoat_Horizontal.png", "image\\PatrolBoat_Vertical.png");
    }

    public void setIcon(Ship ship, String horizontal, String vertical) {
        if (ship.label.getWidth() == 70) {
            //vertical
            for (int i = 0; i < ship.length; i++) {
                square[ship.y / 70 + i][ship.x / 70].setIcon(setImg(vertical, false, ship.length, i));
            }
        } else {
            //horizontal
            for (int i = 0; i < ship.length; i++) {
                square[ship.y / 70][ship.x / 70 + i].setIcon(setImg(horizontal, true, ship.length, i));
            }
        }
    }

    public ImageIcon setImg(String path, boolean horizontal, int n, int i) {
        try {
            BufferedImage img = ImageIO.read(new File(path));
            int w = img.getWidth();
            int h = img.getHeight();
            if (horizontal) {
                return new ImageIcon(img.getSubimage(w / n * i, 0, w / n, h).getScaledInstance(70, 70,
                        Image.SCALE_SMOOTH));
            } else {
                return new ImageIcon(img.getSubimage(0, h / n * i, w, h / n).getScaledInstance(70, 70,
                        Image.SCALE_SMOOTH));
            }
        } catch (IOException ex) {
            Logger.getLogger(PlayBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    public void paintSquare(int row, int col, Color c) {
        square[row][col].setBackground(c);
    }

    public void paintSquare(int row, int col, String path) {
        square[row][col].setIcon(setShooted(path));
    }

    public ImageIcon setShooted(String path) {
        try {
            BufferedImage img = ImageIO.read(new File(path));
            return new ImageIcon(img.getScaledInstance(70, 70, Image.SCALE_SMOOTH));
        } catch (IOException ex) {
            Logger.getLogger(PlayBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setPreferredSize(new java.awt.Dimension(560, 560));
        setLayout(new java.awt.GridLayout(8, 8));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
